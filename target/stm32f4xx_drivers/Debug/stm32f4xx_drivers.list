
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800137c  0800137c  0000237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013b4  080013b4  00003024  2**0
                  CONTENTS
  4 .ARM          00000008  080013b4  080013b4  000023b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013bc  080013bc  00003024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013bc  080013bc  000023bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013c0  080013c0  000023c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080013c4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003024  2**0
                  CONTENTS
 10 .bss          00000444  20000024  20000024  00003024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  00003024  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018cd  00000000  00000000  0000304e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000623  00000000  00000000  0000491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00004f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000127  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028e2  00000000  00000000  000051ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002363  00000000  00000000  00007ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000acef  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014b33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000580  00000000  00000000  00014b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000150f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001364 	.word	0x08001364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001364 	.word	0x08001364

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <USART2_Init>:
// This flag indicates reception completion
uint8_t rxCmplt = RESET;
uint8_t g_data = 0U;

void USART2_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000214 <USART2_Init+0x3c>)
 80001de:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <USART2_Init+0x40>)
 80001e0:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80001e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <USART2_Init+0x3c>)
 80001e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001e8:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <USART2_Init+0x3c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <USART2_Init+0x3c>)
 80001f2:	2202      	movs	r2, #2
 80001f4:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <USART2_Init+0x3c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <USART2_Init+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000202:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <USART2_Init+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000208:	4802      	ldr	r0, [pc, #8]	@ (8000214 <USART2_Init+0x3c>)
 800020a:	f000 fcc7 	bl	8000b9c <USART_Init>
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000440 	.word	0x20000440
 8000218:	40004400 	.word	0x40004400

0800021c <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios = {0U};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]

	usart_gpios.pGPIOx = GPIOA;
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <USART2_GPIOInit+0x48>)
 800022e:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000230:	2302      	movs	r3, #2
 8000232:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPT_TYPE_PP;
 8000234:	2300      	movs	r3, #0
 8000236:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000238:	2301      	movs	r3, #1
 800023a:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023c:	2302      	movs	r3, #2
 800023e:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000240:	2307      	movs	r3, #7
 8000242:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000244:	2302      	movs	r3, #2
 8000246:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f9c0 	bl	80005d0 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000250:	2303      	movs	r3, #3
 8000252:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f9ba 	bl	80005d0 <GPIO_Init>
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40020000 	.word	0x40020000

08000268 <delay>:

void delay(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e002      	b.n	800027a <delay+0x12>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3301      	adds	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <delay+0x28>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d9f8      	bls.n	8000274 <delay+0xc>
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	0003d08f 	.word	0x0003d08f

08000294 <main>:

int main(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]

	USART2_GPIOInit();
 800029e:	f7ff ffbd 	bl	800021c <USART2_GPIOInit>

    USART2_Init();
 80002a2:	f7ff ff99 	bl	80001d8 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 80002a6:	2101      	movs	r1, #1
 80002a8:	2026      	movs	r0, #38	@ 0x26
 80002aa:	f000 fe13 	bl	8000ed4 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	4828      	ldr	r0, [pc, #160]	@ (8000354 <main+0xc0>)
 80002b2:	f000 fd65 	bl	8000d80 <USART_PeripheralControl>

    //do forever
    while(1)
    {
		// wait till button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 80002b6:	bf00      	nop
 80002b8:	2100      	movs	r1, #0
 80002ba:	4827      	ldr	r0, [pc, #156]	@ (8000358 <main+0xc4>)
 80002bc:	f000 fb20 	bl	8000900 <GPIO_ReadFromInputPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f8      	beq.n	80002b8 <main+0x24>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002c6:	f7ff ffcf 	bl	8000268 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4b23      	ldr	r3, [pc, #140]	@ (800035c <main+0xc8>)
 80002ce:	fba3 1302 	umull	r1, r3, r3, r2
 80002d2:	0859      	lsrs	r1, r3, #1
 80002d4:	460b      	mov	r3, r1
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	440b      	add	r3, r1
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	607b      	str	r3, [r7, #4]

		// First lets enable the reception in interrupt mode
		// this code enables the receive interrupt
		while (USART_READY != USART_ReceiveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])));
 80002de:	bf00      	nop
 80002e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000360 <main+0xcc>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff6d 	bl	80001c8 <strlen>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	491c      	ldr	r1, [pc, #112]	@ (8000364 <main+0xd0>)
 80002f4:	481c      	ldr	r0, [pc, #112]	@ (8000368 <main+0xd4>)
 80002f6:	f000 fdc5 	bl	8000e84 <USART_ReceiveDataIT>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1ef      	bne.n	80002e0 <main+0x4c>

		// Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 8000300:	4a17      	ldr	r2, [pc, #92]	@ (8000360 <main+0xcc>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000308:	4a15      	ldr	r2, [pc, #84]	@ (8000360 <main+0xcc>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff59 	bl	80001c8 <strlen>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4621      	mov	r1, r4
 800031c:	4812      	ldr	r0, [pc, #72]	@ (8000368 <main+0xd4>)
 800031e:	f000 fd63 	bl	8000de8 <USART_SendData>

    	// Now lets wait until all the bytes are received from the arduino .
    	// When all the bytes are received rxCmplt will be SET in application callback
    	while(SET != rxCmplt);
 8000322:	bf00      	nop
 8000324:	4b11      	ldr	r3, [pc, #68]	@ (800036c <main+0xd8>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d1fb      	bne.n	8000324 <main+0x90>

    	// just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800032c:	4a0c      	ldr	r2, [pc, #48]	@ (8000360 <main+0xcc>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff47 	bl	80001c8 <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	3301      	adds	r3, #1
 800033e:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <main+0xd0>)
 8000340:	2100      	movs	r1, #0
 8000342:	54d1      	strb	r1, [r2, r3]

    	// invalidate the flag
    	rxCmplt = RESET;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <main+0xd8>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]

    	// move on to next message indexed in msg[]
    	cnt ++;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3301      	adds	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 8000350:	e7b1      	b.n	80002b6 <main+0x22>
 8000352:	bf00      	nop
 8000354:	40004400 	.word	0x40004400
 8000358:	40020000 	.word	0x40020000
 800035c:	aaaaaaab 	.word	0xaaaaaaab
 8000360:	20000000 	.word	0x20000000
 8000364:	20000040 	.word	0x20000040
 8000368:	20000440 	.word	0x20000440
 800036c:	20000464 	.word	0x20000464

08000370 <USART2_IRQHandler>:

	return 0;
}

void USART2_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000374:	4802      	ldr	r0, [pc, #8]	@ (8000380 <USART2_IRQHandler+0x10>)
 8000376:	f000 fe31 	bl	8000fdc <USART_IRQHandling>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000440 	.word	0x20000440

08000384 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
   if (USART_EVENT_RX_CMPLT == ApEv)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <USART_ApplicationEventCallback+0x18>
   {
	   rxCmplt = SET;
 8000396:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <USART_ApplicationEventCallback+0x24>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
   }
   else if (USART_EVENT_TX_CMPLT == ApEv)
   {
	   ;
   }
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000464 	.word	0x20000464

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	@ (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	@ (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 ff9f 	bl	800131c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ff59 	bl	8000294 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80003f0:	080013c4 	.word	0x080013c4
  ldr r2, =_sbss
 80003f4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80003f8:	20000468 	.word	0x20000468

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	// Clock Enable
	if (ENABLE == EnorDi)
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d162      	bne.n	80004d8 <GPIO_PeriClockControl+0xd8>
	{
		if (GPIOA == pGPIOx)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a64      	ldr	r2, [pc, #400]	@ (80005a8 <GPIO_PeriClockControl+0x1a8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x28>
		{
		  GPIOA_PCLK_EN();
 800041a:	4b64      	ldr	r3, [pc, #400]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a63      	ldr	r2, [pc, #396]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (GPIOI == pGPIOx)
		{
		  GPIOI_PCLK_DI();
		}
	}
}
 8000426:	e0b9      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOB == pGPIOx)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a61      	ldr	r2, [pc, #388]	@ (80005b0 <GPIO_PeriClockControl+0x1b0>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x3e>
		  GPIOB_PCLK_EN();
 8000430:	4b5e      	ldr	r3, [pc, #376]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a5d      	ldr	r2, [pc, #372]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e0ae      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOC == pGPIOx)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a5c      	ldr	r2, [pc, #368]	@ (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x54>
		  GPIOC_PCLK_EN();
 8000446:	4b59      	ldr	r3, [pc, #356]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a58      	ldr	r2, [pc, #352]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e0a3      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOD == pGPIOx)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a58      	ldr	r2, [pc, #352]	@ (80005b8 <GPIO_PeriClockControl+0x1b8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x6a>
		  GPIOD_PCLK_EN();
 800045c:	4b53      	ldr	r3, [pc, #332]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a52      	ldr	r2, [pc, #328]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e098      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOE == pGPIOx)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a53      	ldr	r2, [pc, #332]	@ (80005bc <GPIO_PeriClockControl+0x1bc>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x80>
		  GPIOE_PCLK_EN();
 8000472:	4b4e      	ldr	r3, [pc, #312]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a4d      	ldr	r2, [pc, #308]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e08d      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOF == pGPIOx)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a4f      	ldr	r2, [pc, #316]	@ (80005c0 <GPIO_PeriClockControl+0x1c0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x96>
		  GPIOF_PCLK_EN();
 8000488:	4b48      	ldr	r3, [pc, #288]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a47      	ldr	r2, [pc, #284]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	e082      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOG == pGPIOx)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a4a      	ldr	r2, [pc, #296]	@ (80005c4 <GPIO_PeriClockControl+0x1c4>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0xac>
		  GPIOG_PCLK_EN();
 800049e:	4b43      	ldr	r3, [pc, #268]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a42      	ldr	r2, [pc, #264]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004aa:	e077      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOH == pGPIOx)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a46      	ldr	r2, [pc, #280]	@ (80005c8 <GPIO_PeriClockControl+0x1c8>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0xc2>
		  GPIOH_PCLK_EN();
 80004b4:	4b3d      	ldr	r3, [pc, #244]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a3c      	ldr	r2, [pc, #240]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c0:	e06c      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOI == pGPIOx)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a41      	ldr	r2, [pc, #260]	@ (80005cc <GPIO_PeriClockControl+0x1cc>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d168      	bne.n	800059c <GPIO_PeriClockControl+0x19c>
		  GPIOI_PCLK_EN();
 80004ca:	4b38      	ldr	r3, [pc, #224]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a37      	ldr	r2, [pc, #220]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d6:	e061      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		if (GPIOA == pGPIOx)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a33      	ldr	r2, [pc, #204]	@ (80005a8 <GPIO_PeriClockControl+0x1a8>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0xee>
		  GPIOA_PCLK_DI();
 80004e0:	4b32      	ldr	r3, [pc, #200]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a31      	ldr	r2, [pc, #196]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	e056      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOB == pGPIOx)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a2f      	ldr	r2, [pc, #188]	@ (80005b0 <GPIO_PeriClockControl+0x1b0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x104>
		  GPIOB_PCLK_DI();
 80004f6:	4b2d      	ldr	r3, [pc, #180]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a2c      	ldr	r2, [pc, #176]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 80004fc:	f023 0302 	bic.w	r3, r3, #2
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000502:	e04b      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOC == pGPIOx)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a2b      	ldr	r2, [pc, #172]	@ (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PeriClockControl+0x11a>
		  GPIOC_PCLK_DI();
 800050c:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a26      	ldr	r2, [pc, #152]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000512:	f023 0304 	bic.w	r3, r3, #4
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000518:	e040      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOD == pGPIOx)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <GPIO_PeriClockControl+0x1b8>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x130>
		  GPIOD_PCLK_DI();
 8000522:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a21      	ldr	r2, [pc, #132]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000528:	f023 0308 	bic.w	r3, r3, #8
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800052e:	e035      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOE == pGPIOx)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a22      	ldr	r2, [pc, #136]	@ (80005bc <GPIO_PeriClockControl+0x1bc>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PeriClockControl+0x146>
		  GPIOE_PCLK_DI();
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800053e:	f023 0310 	bic.w	r3, r3, #16
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000544:	e02a      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOF == pGPIOx)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <GPIO_PeriClockControl+0x1c0>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x15c>
		  GPIOF_PCLK_DI();
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000554:	f023 0320 	bic.w	r3, r3, #32
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800055a:	e01f      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOG == pGPIOx)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a19      	ldr	r2, [pc, #100]	@ (80005c4 <GPIO_PeriClockControl+0x1c4>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PeriClockControl+0x172>
		  GPIOG_PCLK_DI();
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000568:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800056a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800056e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000570:	e014      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOH == pGPIOx)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <GPIO_PeriClockControl+0x1c8>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x188>
		  GPIOH_PCLK_DI();
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000586:	e009      	b.n	800059c <GPIO_PeriClockControl+0x19c>
		else if (GPIOI == pGPIOx)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a10      	ldr	r2, [pc, #64]	@ (80005cc <GPIO_PeriClockControl+0x1cc>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d105      	bne.n	800059c <GPIO_PeriClockControl+0x19c>
		  GPIOI_PCLK_DI();
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000594:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <GPIO_PeriClockControl+0x1ac>)
 8000596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800059a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40021400 	.word	0x40021400
 80005c4:	40021800 	.word	0x40021800
 80005c8:	40021c00 	.word	0x40021c00
 80005cc:	40022000 	.word	0x40022000

080005d0 <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0U;	// temp. register
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

	// Configure the clock for GPIO Peripheral
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff0c 	bl	8000400 <GPIO_PeriClockControl>

	// Configure the mode of gpio pin
	if (GPIO_MODE_ANALOG >= pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d81e      	bhi.n	800062e <GPIO_Init+0x5e>
	{
		// The non interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2U * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	// Multiply with 2 because one pin takes 2 bits
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6819      	ldr	r1, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	461a      	mov	r2, r3
 800060e:	2303      	movs	r3, #3
 8000610:	4093      	lsls	r3, r2
 8000612:	43da      	mvns	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	400a      	ands	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6819      	ldr	r1, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	430a      	orrs	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e0c4      	b.n	80007b8 <GPIO_Init+0x1e8>
	}
	else
	{
		// The interrupt mode
		if (GPIO_MODE_IT_FT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b04      	cmp	r3, #4
 8000634:	d115      	bne.n	8000662 <GPIO_Init+0x92>
		{
			// Configure the FTSR (Falling Trigger Selection Register) bit
			EXTI->FTSR |= (1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b48      	ldr	r3, [pc, #288]	@ (8000758 <GPIO_Init+0x188>)
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	4619      	mov	r1, r3
 8000640:	2301      	movs	r3, #1
 8000642:	408b      	lsls	r3, r1
 8000644:	4944      	ldr	r1, [pc, #272]	@ (8000758 <GPIO_Init+0x188>)
 8000646:	4313      	orrs	r3, r2
 8000648:	60cb      	str	r3, [r1, #12]
			// Clear the corresponding RTSR (Rising Trigger Selection Register) bit
			EXTI->RTSR &= ~(1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b43      	ldr	r3, [pc, #268]	@ (8000758 <GPIO_Init+0x188>)
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	4619      	mov	r1, r3
 8000654:	2301      	movs	r3, #1
 8000656:	408b      	lsls	r3, r1
 8000658:	43db      	mvns	r3, r3
 800065a:	493f      	ldr	r1, [pc, #252]	@ (8000758 <GPIO_Init+0x188>)
 800065c:	4013      	ands	r3, r2
 800065e:	608b      	str	r3, [r1, #8]
 8000660:	e031      	b.n	80006c6 <GPIO_Init+0xf6>
		}
		else if (GPIO_MODE_IT_RT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d115      	bne.n	8000696 <GPIO_Init+0xc6>
		{
			// Configure the RTSR (Rising Trigger Selection Register) bit
			EXTI->RTSR |= (1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066a:	4b3b      	ldr	r3, [pc, #236]	@ (8000758 <GPIO_Init+0x188>)
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	2301      	movs	r3, #1
 8000676:	408b      	lsls	r3, r1
 8000678:	4937      	ldr	r1, [pc, #220]	@ (8000758 <GPIO_Init+0x188>)
 800067a:	4313      	orrs	r3, r2
 800067c:	608b      	str	r3, [r1, #8]
			// Clear the corresponding FTSR (Falling Trigger Selection Register) bit
			EXTI->FTSR &= ~(1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <GPIO_Init+0x188>)
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	2301      	movs	r3, #1
 800068a:	408b      	lsls	r3, r1
 800068c:	43db      	mvns	r3, r3
 800068e:	4932      	ldr	r1, [pc, #200]	@ (8000758 <GPIO_Init+0x188>)
 8000690:	4013      	ands	r3, r2
 8000692:	60cb      	str	r3, [r1, #12]
 8000694:	e017      	b.n	80006c6 <GPIO_Init+0xf6>
		}
		else if (GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	795b      	ldrb	r3, [r3, #5]
 800069a:	2b06      	cmp	r3, #6
 800069c:	d113      	bne.n	80006c6 <GPIO_Init+0xf6>
		{
			// Configure the FTSR (Falling Trigger Selection Register) bit
			EXTI->FTSR |= (1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069e:	4b2e      	ldr	r3, [pc, #184]	@ (8000758 <GPIO_Init+0x188>)
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2301      	movs	r3, #1
 80006aa:	408b      	lsls	r3, r1
 80006ac:	492a      	ldr	r1, [pc, #168]	@ (8000758 <GPIO_Init+0x188>)
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60cb      	str	r3, [r1, #12]
			// Configure the RTSR (Rising Trigger Selection Register) bit
			EXTI->RTSR |= (1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <GPIO_Init+0x188>)
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2301      	movs	r3, #1
 80006be:	408b      	lsls	r3, r1
 80006c0:	4925      	ldr	r1, [pc, #148]	@ (8000758 <GPIO_Init+0x188>)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	608b      	str	r3, [r1, #8]
		}

		// Configure the GPIO port selection in SYSCFG_EXTICR (System Configuration Controller External Interrupt)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4U;	// It decides that EXTICR[x] = EXTICR[temp1]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4U;	// It decides that Section for EXTI
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1f      	ldr	r2, [pc, #124]	@ (800075c <GPIO_Init+0x18c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d04e      	beq.n	8000780 <GPIO_Init+0x1b0>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <GPIO_Init+0x190>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d032      	beq.n	8000752 <GPIO_Init+0x182>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <GPIO_Init+0x194>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d02b      	beq.n	800074e <GPIO_Init+0x17e>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <GPIO_Init+0x198>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d024      	beq.n	800074a <GPIO_Init+0x17a>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	@ (800076c <GPIO_Init+0x19c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d01d      	beq.n	8000746 <GPIO_Init+0x176>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <GPIO_Init+0x1a0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d016      	beq.n	8000742 <GPIO_Init+0x172>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <GPIO_Init+0x1a4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d00f      	beq.n	800073e <GPIO_Init+0x16e>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <GPIO_Init+0x1a8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d008      	beq.n	800073a <GPIO_Init+0x16a>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a13      	ldr	r2, [pc, #76]	@ (800077c <GPIO_Init+0x1ac>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <GPIO_Init+0x166>
 8000732:	2308      	movs	r3, #8
 8000734:	e025      	b.n	8000782 <GPIO_Init+0x1b2>
 8000736:	2300      	movs	r3, #0
 8000738:	e023      	b.n	8000782 <GPIO_Init+0x1b2>
 800073a:	2307      	movs	r3, #7
 800073c:	e021      	b.n	8000782 <GPIO_Init+0x1b2>
 800073e:	2306      	movs	r3, #6
 8000740:	e01f      	b.n	8000782 <GPIO_Init+0x1b2>
 8000742:	2305      	movs	r3, #5
 8000744:	e01d      	b.n	8000782 <GPIO_Init+0x1b2>
 8000746:	2304      	movs	r3, #4
 8000748:	e01b      	b.n	8000782 <GPIO_Init+0x1b2>
 800074a:	2303      	movs	r3, #3
 800074c:	e019      	b.n	8000782 <GPIO_Init+0x1b2>
 800074e:	2302      	movs	r3, #2
 8000750:	e017      	b.n	8000782 <GPIO_Init+0x1b2>
 8000752:	2301      	movs	r3, #1
 8000754:	e015      	b.n	8000782 <GPIO_Init+0x1b2>
 8000756:	bf00      	nop
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021000 	.word	0x40021000
 8000770:	40021400 	.word	0x40021400
 8000774:	40021800 	.word	0x40021800
 8000778:	40021c00 	.word	0x40021c00
 800077c:	40022000 	.word	0x40022000
 8000780:	2300      	movs	r3, #0
 8000782:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000784:	4b5b      	ldr	r3, [pc, #364]	@ (80008f4 <GPIO_Init+0x324>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000788:	4a5a      	ldr	r2, [pc, #360]	@ (80008f4 <GPIO_Init+0x324>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4U);	// Multiply with 4 because one pin takes 4 bit
 8000790:	7c7a      	ldrb	r2, [r7, #17]
 8000792:	7cbb      	ldrb	r3, [r7, #18]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa02 f103 	lsl.w	r1, r2, r3
 800079a:	4a57      	ldr	r2, [pc, #348]	@ (80008f8 <GPIO_Init+0x328>)
 800079c:	7cfb      	ldrb	r3, [r7, #19]
 800079e:	3302      	adds	r3, #2
 80007a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI Interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b55      	ldr	r3, [pc, #340]	@ (80008fc <GPIO_Init+0x32c>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2301      	movs	r3, #1
 80007b0:	408b      	lsls	r3, r1
 80007b2:	4952      	ldr	r1, [pc, #328]	@ (80008fc <GPIO_Init+0x32c>)
 80007b4:	4313      	orrs	r3, r2
 80007b6:	600b      	str	r3, [r1, #0]
	}

	temp = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2U * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	// Multiply with 2 because one pin takes 2 bits
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	799b      	ldrb	r3, [r3, #6]
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6899      	ldr	r1, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	461a      	mov	r2, r3
 80007da:	2303      	movs	r3, #3
 80007dc:	4093      	lsls	r3, r2
 80007de:	43da      	mvns	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	400a      	ands	r2, r1
 80007e6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // setting
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6899      	ldr	r1, [r3, #8]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	609a      	str	r2, [r3, #8]

	temp = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

	// Configure the PullUp/PullDown settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2U * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	// Multiply with 2 because one pin takes 2 bits
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	79db      	ldrb	r3, [r3, #7]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68d9      	ldr	r1, [r3, #12]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	461a      	mov	r2, r3
 800081a:	2303      	movs	r3, #3
 800081c:	4093      	lsls	r3, r2
 800081e:	43da      	mvns	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	400a      	ands	r2, r1
 8000826:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // setting
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68d9      	ldr	r1, [r3, #12]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	430a      	orrs	r2, r1
 8000836:	60da      	str	r2, [r3, #12]

	temp = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

	// Configure the OutputType
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a1b      	ldrb	r3, [r3, #8]
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6859      	ldr	r1, [r3, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	461a      	mov	r2, r3
 8000858:	2301      	movs	r3, #1
 800085a:	4093      	lsls	r3, r2
 800085c:	43da      	mvns	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	400a      	ands	r2, r1
 8000864:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // setting
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6859      	ldr	r1, [r3, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	430a      	orrs	r2, r1
 8000874:	605a      	str	r2, [r3, #4]

	temp = 0U;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

	// Configure the Alternate Functionality
	if (GPIO_MODE_ALTFN == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d134      	bne.n	80008ec <GPIO_Init+0x31c>
	{
		// Configure the alternate function registers
		uint8_t temp1 = 0U;
 8000882:	2300      	movs	r3, #0
 8000884:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = 0U;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8U;	// It decides that which AFR will use in AFRL (Alternate Function High Register) or AFRH (Alternate Function Low Register)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8U;	// It decides that which Pin will use
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xFU << (4U * temp2)); // clearing and Multiply with 4 because one pin takes 4 bits
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7c3a      	ldrb	r2, [r7, #16]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	220f      	movs	r2, #15
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	7c3a      	ldrb	r2, [r7, #16]
 80008ba:	4001      	ands	r1, r0
 80008bc:	3208      	adds	r2, #8
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4U * temp2)); // setting	and Multiply with 4 because one pin takes 4 bits
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7c3a      	ldrb	r2, [r7, #16]
 80008c8:	3208      	adds	r2, #8
 80008ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7a5b      	ldrb	r3, [r3, #9]
 80008d2:	461a      	mov	r2, r3
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7c3a      	ldrb	r2, [r7, #16]
 80008e4:	4301      	orrs	r1, r0
 80008e6:	3208      	adds	r2, #8
 80008e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40013c00 	.word	0x40013c00

08000900 <GPIO_ReadFromInputPin>:
 * @return		- 0 or 1
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]

	Value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001U);	// Read only from LSB (Least Significant Bit)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	fa22 f303 	lsr.w	r3, r2, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]

	return Value;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <RCC_GetPCLK1Value>:
 * @return            - pclk1
 *
 * @Note              - none
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
	uint32_t pclk1 = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
	uint32_t SystemClk = 0U;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	uint8_t clksrc = 0U;
 800093e:	2300      	movs	r3, #0
 8000940:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = 0U;
 8000942:	2300      	movs	r3, #0
 8000944:	70bb      	strb	r3, [r7, #2]
	uint8_t ahbp = 0U;
 8000946:	2300      	movs	r3, #0
 8000948:	72fb      	strb	r3, [r7, #11]
	uint8_t apb1p = 0U;
 800094a:	2300      	movs	r3, #0
 800094c:	72bb      	strb	r3, [r7, #10]

	clksrc = (RCC->CFGR >> 2U) & 0x3U;
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <RCC_GetPCLK1Value+0xac>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	70fb      	strb	r3, [r7, #3]

	if (0U == clksrc)
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = 16000000;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <RCC_GetPCLK1Value+0xb0>)
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e004      	b.n	8000972 <RCC_GetPCLK1Value+0x42>
	}
	else if (1U == clksrc)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <RCC_GetPCLK1Value+0x42>
	{
		SystemClk = 8000000;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <RCC_GetPCLK1Value+0xb4>)
 8000970:	60fb      	str	r3, [r7, #12]
	}

	// For AHB
	temp = (RCC->CFGR >> 4U) & 0xF;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <RCC_GetPCLK1Value+0xac>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	70bb      	strb	r3, [r7, #2]

	if (8U > temp)
 8000980:	78bb      	ldrb	r3, [r7, #2]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d802      	bhi.n	800098c <RCC_GetPCLK1Value+0x5c>
	{
		ahbp = 1U;
 8000986:	2301      	movs	r3, #1
 8000988:	72fb      	strb	r3, [r7, #11]
 800098a:	e005      	b.n	8000998 <RCC_GetPCLK1Value+0x68>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8U];
 800098c:	78bb      	ldrb	r3, [r7, #2]
 800098e:	3b08      	subs	r3, #8
 8000990:	4a15      	ldr	r2, [pc, #84]	@ (80009e8 <RCC_GetPCLK1Value+0xb8>)
 8000992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000996:	72fb      	strb	r3, [r7, #11]
	}

	// For APB1
	temp = (RCC->CFGR >> 10U) & 0x7;
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <RCC_GetPCLK1Value+0xac>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	0a9b      	lsrs	r3, r3, #10
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	70bb      	strb	r3, [r7, #2]

	if (4U > temp)
 80009a6:	78bb      	ldrb	r3, [r7, #2]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d802      	bhi.n	80009b2 <RCC_GetPCLK1Value+0x82>
	{
		apb1p = 1U;
 80009ac:	2301      	movs	r3, #1
 80009ae:	72bb      	strb	r3, [r7, #10]
 80009b0:	e005      	b.n	80009be <RCC_GetPCLK1Value+0x8e>
	}
	else
	{
		apb1p = APB1_Prescaler[temp-4U];
 80009b2:	78bb      	ldrb	r3, [r7, #2]
 80009b4:	3b04      	subs	r3, #4
 80009b6:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <RCC_GetPCLK1Value+0xbc>)
 80009b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009bc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009c6:	7abb      	ldrb	r3, [r7, #10]
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	00f42400 	.word	0x00f42400
 80009e4:	007a1200 	.word	0x007a1200
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	2000001c 	.word	0x2000001c

080009f0 <RCC_GetPCLK2Value>:
 * @return            - pclk2
 *
 * @Note              - none
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
	uint32_t SystemClock = 0U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
	uint8_t tmp = 0U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	727b      	strb	r3, [r7, #9]
	uint32_t pclk2 = 0U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
	uint8_t clk_src = 0U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbp = 0U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72fb      	strb	r3, [r7, #11]
	uint8_t apb2p = 0U;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	72bb      	strb	r3, [r7, #10]

	clk_src = (RCC->CFGR >> 2) & 0X3;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <RCC_GetPCLK2Value+0xa4>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	70fb      	strb	r3, [r7, #3]

	if (0U == clk_src)
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <RCC_GetPCLK2Value+0x38>
	{
		SystemClock = 16000000;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <RCC_GetPCLK2Value+0xa8>)
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	e001      	b.n	8000a2c <RCC_GetPCLK2Value+0x3c>
	}
	else
	{
		SystemClock = 8000000;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <RCC_GetPCLK2Value+0xac>)
 8000a2a:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4) & 0xF;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <RCC_GetPCLK2Value+0xa4>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f003 030f 	and.w	r3, r3, #15
 8000a38:	727b      	strb	r3, [r7, #9]

	if (0x08 > tmp)
 8000a3a:	7a7b      	ldrb	r3, [r7, #9]
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d802      	bhi.n	8000a46 <RCC_GetPCLK2Value+0x56>
	{
		ahbp = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	72fb      	strb	r3, [r7, #11]
 8000a44:	e005      	b.n	8000a52 <RCC_GetPCLK2Value+0x62>
	}
	else
	{
	   ahbp = AHB_Prescaler[tmp-8];
 8000a46:	7a7b      	ldrb	r3, [r7, #9]
 8000a48:	3b08      	subs	r3, #8
 8000a4a:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <RCC_GetPCLK2Value+0xb0>)
 8000a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a50:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13) & 0x7;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <RCC_GetPCLK2Value+0xa4>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	0b5b      	lsrs	r3, r3, #13
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	727b      	strb	r3, [r7, #9]

	if (0x04 > tmp)
 8000a60:	7a7b      	ldrb	r3, [r7, #9]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d802      	bhi.n	8000a6c <RCC_GetPCLK2Value+0x7c>
	{
		apb2p = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	72bb      	strb	r3, [r7, #10]
 8000a6a:	e005      	b.n	8000a78 <RCC_GetPCLK2Value+0x88>
	}
	else
	{
		apb2p = APB1_Prescaler[tmp-4];
 8000a6c:	7a7b      	ldrb	r3, [r7, #9]
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <RCC_GetPCLK2Value+0xb4>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp) / apb2p;
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a80:	7abb      	ldrb	r3, [r7, #10]
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800
 8000a98:	00f42400 	.word	0x00f42400
 8000a9c:	007a1200 	.word	0x007a1200
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	2000001c 	.word	0x2000001c

08000aa8 <USART_SetBaudRate>:
 *
 * @Note              - none

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	// Variable to hold the APB clock
	uint32_t PCLKx = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]

	uint32_t usartdiv = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]

	// variables to hold Mantissa and Fraction values
	uint32_t M_part = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
	uint32_t F_part = 0U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

	uint32_t tempreg = 0U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]

	// Get the value of APB bus clock in to the variable PCLKx
	if ((USART1 == pUSARTx)|| (USART6 == pUSARTx))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a31      	ldr	r2, [pc, #196]	@ (8000b90 <USART_SetBaudRate+0xe8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d003      	beq.n	8000ad6 <USART_SetBaudRate+0x2e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a30      	ldr	r2, [pc, #192]	@ (8000b94 <USART_SetBaudRate+0xec>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d103      	bne.n	8000ade <USART_SetBaudRate+0x36>
	{
	   // USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000ad6:	f7ff ff8b 	bl	80009f0 <RCC_GetPCLK2Value>
 8000ada:	61f8      	str	r0, [r7, #28]
 8000adc:	e002      	b.n	8000ae4 <USART_SetBaudRate+0x3c>
	}
	else
	{
	   PCLKx = RCC_GetPCLK1Value();
 8000ade:	f7ff ff27 	bl	8000930 <RCC_GetPCLK1Value>
 8000ae2:	61f8      	str	r0, [r7, #28]
	}

	// Check for OVER8 configuration bit
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <USART_SetBaudRate+0x60>
	{
	   // OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009a      	lsls	r2, r3, #2
 8000afa:	441a      	add	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	e00a      	b.n	8000b1e <USART_SetBaudRate+0x76>
	}
	else
	{
	   // over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009a      	lsls	r2, r3, #2
 8000b12:	441a      	add	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
	}

	// Calculate the Mantissa part
	M_part = usartdiv/100;
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4a1d      	ldr	r2, [pc, #116]	@ (8000b98 <USART_SetBaudRate+0xf0>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	613b      	str	r3, [r7, #16]

	// Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]

	// Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2264      	movs	r2, #100	@ 0x64
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	617b      	str	r3, [r7, #20]

	// Calculate the final fractional
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00a      	beq.n	8000b64 <USART_SetBaudRate+0xbc>
	{
	  // OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100) & ((uint8_t)0x07);
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	3332      	adds	r3, #50	@ 0x32
 8000b54:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <USART_SetBaudRate+0xf0>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <USART_SetBaudRate+0xd0>

	}
	else
	{
	   // over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	3332      	adds	r3, #50	@ 0x32
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <USART_SetBaudRate+0xf0>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	617b      	str	r3, [r7, #20]

	}

	// Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

	// copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	609a      	str	r2, [r3, #8]
}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40011400 	.word	0x40011400
 8000b98:	51eb851f 	.word	0x51eb851f

08000b9c <USART_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	// Temporary variable
	uint32_t tempreg = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	// Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f876 	bl	8000ca0 <USART_PeriClockControl>

	// Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (USART_MODE_ONLY_RX == pUSARTHandle->USART_Config.USART_Mode)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d104      	bne.n	8000bc6 <USART_Init+0x2a>
	{
		// Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e010      	b.n	8000be8 <USART_Init+0x4c>
	}
	else if (USART_MODE_ONLY_TX == pUSARTHandle->USART_Config.USART_Mode)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <USART_Init+0x3c>
	{
		// Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e007      	b.n	8000be8 <USART_Init+0x4c>

	}
	else if (USART_MODE_TXRX == pUSARTHandle->USART_Config.USART_Mode)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d103      	bne.n	8000be8 <USART_Init+0x4c>
	{
		// Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f043 030c 	orr.w	r3, r3, #12
 8000be6:	60fb      	str	r3, [r7, #12]
	}

    // Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7b5b      	ldrb	r3, [r3, #13]
 8000bec:	031b      	lsls	r3, r3, #12
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

    // Configuration of parity control bit fields
	if (USART_PARITY_EN_EVEN == pUSARTHandle->USART_Config.USART_ParityControl)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b9b      	ldrb	r3, [r3, #14]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d104      	bne.n	8000c06 <USART_Init+0x6a>
	{
		// Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e00b      	b.n	8000c1e <USART_Init+0x82>

		// Implement the code to enable EVEN parity
		// Not required because by default EVEN parity will be selected once you enable the parity control
	}
	else if (USART_PARITY_EN_ODD == pUSARTHandle->USART_Config.USART_ParityControl)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7b9b      	ldrb	r3, [r3, #14]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d107      	bne.n	8000c1e <USART_Init+0x82>
	{
		// Implement the code to enable the parity control
	    tempreg |= (1 << USART_CR1_PCE);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c14:	60fb      	str	r3, [r7, #12]

	    // Implement the code to enable ODD parity
	    tempreg |= (1 << USART_CR1_PS);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1c:	60fb      	str	r3, [r7, #12]
	}

    // Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]

	// Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7b1b      	ldrb	r3, [r3, #12]
 8000c2e:	031b      	lsls	r3, r3, #12
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]

	// Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg = 0U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]

	// Configuration of USART hardware flow control
	if (USART_HW_FLOW_CTRL_CTS == pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7bdb      	ldrb	r3, [r3, #15]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <USART_Init+0xb8>
	{
		// Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e014      	b.n	8000c7e <USART_Init+0xe2>
	}
	else if (USART_HW_FLOW_CTRL_RTS == pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7bdb      	ldrb	r3, [r3, #15]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d104      	bne.n	8000c66 <USART_Init+0xca>
	{
		// Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e00b      	b.n	8000c7e <USART_Init+0xe2>
	}
	else if (USART_HW_FLOW_CTRL_CTS_RTS == pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7bdb      	ldrb	r3, [r3, #15]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d107      	bne.n	8000c7e <USART_Init+0xe2>
	{
		// Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c74:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7c:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	// Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4610      	mov	r0, r2
 8000c92:	f7ff ff09 	bl	8000aa8 <USART_SetBaudRate>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <USART_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	// Clock Enable
	if (ENABLE == EnorDi)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d12b      	bne.n	8000d0a <USART_PeriClockControl+0x6a>
	{
		if (USART1 == pUSARTx)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8000d6c <USART_PeriClockControl+0xcc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d106      	bne.n	8000cc8 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (UART4 == pUSARTx)
		{
			UART4_PCLK_DI();
		}
	}
}
 8000cc6:	e04b      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (USART2 == pUSARTx)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a2a      	ldr	r2, [pc, #168]	@ (8000d74 <USART_PeriClockControl+0xd4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d106      	bne.n	8000cde <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000cd0:	4b27      	ldr	r3, [pc, #156]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a26      	ldr	r2, [pc, #152]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cdc:	e040      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (USART3 == pUSARTx)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <USART_PeriClockControl+0xd8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000ce6:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cf2:	e035      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (UART4 == pUSARTx)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <USART_PeriClockControl+0xdc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d131      	bne.n	8000d60 <USART_PeriClockControl+0xc0>
			UART4_PCLK_EN();
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d06:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d08:	e02a      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		if (USART1 == pUSARTx)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <USART_PeriClockControl+0xcc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <USART_PeriClockControl+0x80>
			USART1_PCLK_DI();
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a16      	ldr	r2, [pc, #88]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d18:	f023 0310 	bic.w	r3, r3, #16
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000d1e:	e01f      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (USART2 == pUSARTx)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <USART_PeriClockControl+0xd4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d106      	bne.n	8000d36 <USART_PeriClockControl+0x96>
			USART2_PCLK_DI();
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d2e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d34:	e014      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (USART3 == pUSARTx)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <USART_PeriClockControl+0xd8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <USART_PeriClockControl+0xac>
			USART3_PCLK_DI();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d4a:	e009      	b.n	8000d60 <USART_PeriClockControl+0xc0>
		else if (UART4 == pUSARTx)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <USART_PeriClockControl+0xdc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d105      	bne.n	8000d60 <USART_PeriClockControl+0xc0>
			UART4_PCLK_DI();
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <USART_PeriClockControl+0xd0>)
 8000d5a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000d5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40004400 	.word	0x40004400
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	40004c00 	.word	0x40004c00

08000d80 <USART_PeripheralControl>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
	if (ENABLE == EnorDi)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d106      	bne.n	8000da0 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 8000d9e:	e005      	b.n	8000dac <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60da      	str	r2, [r3, #12]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <USART_GetFlagStatus>:
 * @return		- FlagStatus
 *
 * @Note		- none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b085      	sub	sp, #20
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	70fb      	strb	r3, [r7, #3]
	uint8_t FlagStatus = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]

    if (pUSARTx->SR & StatusFlagName)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <USART_GetFlagStatus+0x22>
    {
    	FlagStatus = SET;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e001      	b.n	8000ddc <USART_GetFlagStatus+0x26>
    }
    else
    {
    	FlagStatus = RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
    }

   return FlagStatus;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <USART_SendData>:
 * @return            - none
 *
 * @Note              - none
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

    // Loop over until "Len" number of bytes are transferred
	for (uint32_t i = 0 ; i < Len; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e031      	b.n	8000e5e <USART_SendData+0x76>
	{
		// Implement the code to wait until TXE flag is set in the SR
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000dfa:	bf00      	nop
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffd7 	bl	8000db6 <USART_GetFlagStatus>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f6      	beq.n	8000dfc <USART_SendData+0x14>

		// Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if (USART_WORDLEN_9BITS == pUSARTHandle->USART_Config.USART_WordLength)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	7b5b      	ldrb	r3, [r3, #13]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d118      	bne.n	8000e48 <USART_SendData+0x60>
		{
			// if 9BIT load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e28:	605a      	str	r2, [r3, #4]

			// check for USART_ParityControl
			if (USART_PARITY_DISABLE == pUSARTHandle->USART_Config.USART_ParityControl)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	7b9b      	ldrb	r3, [r3, #14]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d106      	bne.n	8000e40 <USART_SendData+0x58>
			{
				// No parity is used in this transfer , so 9bits of user data will be sent
				// Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	e00b      	b.n	8000e58 <USART_SendData+0x70>
			}
			else
			{
				// Parity bit is used in this transfer . so 8bits of user data will be sent
				// The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	e007      	b.n	8000e58 <USART_SendData+0x70>
			}
		}
		else
		{
			// This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]

			// Implement the code to increment the buffer address
			pTxBuffer++;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0 ; i < Len; i++)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3c9      	bcc.n	8000dfa <USART_SendData+0x12>
		}
	}

	// Implement the code to wait till TC flag is set in the SR
	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000e66:	bf00      	nop
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2140      	movs	r1, #64	@ 0x40
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ffa1 	bl	8000db6 <USART_GetFlagStatus>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f6      	beq.n	8000e68 <USART_SendData+0x80>
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <USART_ReceiveDataIT>:
 * @return            - rxstate
 *
 * @Note              - none
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e96:	75fb      	strb	r3, [r7, #23]

	if (USART_BUSY_IN_RX != rxstate)
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d014      	beq.n	8000ec8 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]

		// Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	60da      	str	r2, [r3, #12]
	}

	return rxstate;
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <USART_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	if (ENABLE == EnorDi)
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d133      	bne.n	8000f52 <USART_IRQInterruptConfig+0x7e>
	{
		if (31 >= IRQNumber) // 0 to 31
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b1f      	cmp	r3, #31
 8000eee:	d80a      	bhi.n	8000f06 <USART_IRQInterruptConfig+0x32>
		{
			// Program ISER0 (Interrupt Set-Enable Register 0) Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ef0:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <USART_IRQInterruptConfig+0xf0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a31      	ldr	r2, [pc, #196]	@ (8000fc4 <USART_IRQInterruptConfig+0xf0>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
		{
			// Program ICER0 (Interrupt Clear-Enable Register 2) Register
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000f04:	e059      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
		else if ((31 < IRQNumber) && (64 > IRQNumber)) // 32 to 63
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b1f      	cmp	r3, #31
 8000f0a:	d90f      	bls.n	8000f2c <USART_IRQInterruptConfig+0x58>
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f10:	d80c      	bhi.n	8000f2c <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000f12:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <USART_IRQInterruptConfig+0xf4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	f002 021f 	and.w	r2, r2, #31
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4611      	mov	r1, r2
 8000f24:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <USART_IRQInterruptConfig+0xf4>)
 8000f26:	430b      	orrs	r3, r1
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e046      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
		else if ((64 <= IRQNumber) && (96 > IRQNumber)) // 64 to 95
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f30:	d943      	bls.n	8000fba <USART_IRQInterruptConfig+0xe6>
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f36:	d840      	bhi.n	8000fba <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= (1 << (IRQNumber % 64));
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <USART_IRQInterruptConfig+0xf8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <USART_IRQInterruptConfig+0xf8>)
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	e033      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
		if (31 >= IRQNumber) // 0 to 31
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b1f      	cmp	r3, #31
 8000f56:	d80a      	bhi.n	8000f6e <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <USART_IRQInterruptConfig+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4611      	mov	r1, r2
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <USART_IRQInterruptConfig+0xfc>)
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	e025      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
		else if ((31 < IRQNumber) && (64 > IRQNumber)) // 32 to 63
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b1f      	cmp	r3, #31
 8000f72:	d90f      	bls.n	8000f94 <USART_IRQInterruptConfig+0xc0>
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f78:	d80c      	bhi.n	8000f94 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <USART_IRQInterruptConfig+0x100>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	f002 021f 	and.w	r2, r2, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <USART_IRQInterruptConfig+0x100>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e012      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
		else if ((64 <= IRQNumber) && (96 > IRQNumber)) // 64 to 95
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f98:	d90f      	bls.n	8000fba <USART_IRQInterruptConfig+0xe6>
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f9e:	d80c      	bhi.n	8000fba <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <USART_IRQInterruptConfig+0x104>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <USART_IRQInterruptConfig+0x104>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	e7ff      	b.n	8000fba <USART_IRQInterruptConfig+0xe6>
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000e104 	.word	0xe000e104
 8000fcc:	e000e10c 	.word	0xe000e10c
 8000fd0:	e000e180 	.word	0xe000e180
 8000fd4:	e000e184 	.word	0xe000e184
 8000fd8:	e000e18c 	.word	0xe000e18c

08000fdc <USART_IRQHandling>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint32_t temp1 = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	uint32_t temp2 = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    // Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	617b      	str	r3, [r7, #20]

	 // Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001002:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d021      	beq.n	800104e <USART_IRQHandling+0x72>
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01e      	beq.n	800104e <USART_IRQHandling+0x72>
	{
		// this interrupt is because of TC

		// close transmission and call application callback if TxLen is zero
		if (USART_BUSY_IN_TX == pUSARTHandle->TxBusyState)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d119      	bne.n	800104e <USART_IRQHandling+0x72>
		{
			// Check the TxLen . If it is zero then close the data transmission
			if (!pUSARTHandle->TxLen)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d115      	bne.n	800104e <USART_IRQHandling+0x72>
			{
				// Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_TC);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001030:	601a      	str	r2, [r3, #0]

				// Implement the code to clear the TCEIE control bit

				// Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

				// Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]

				// Reset the length to zero
				pUSARTHandle->TxLen = 0U;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]

				// Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8001046:	2100      	movs	r1, #0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff f99b 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	// Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001058:	617b      	str	r3, [r7, #20]

	// Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001064:	613b      	str	r3, [r7, #16]


	if (temp1 && temp2)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d055      	beq.n	8001118 <USART_IRQHandling+0x13c>
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d052      	beq.n	8001118 <USART_IRQHandling+0x13c>
	{
		// this interrupt is because of TXE

		if (USART_BUSY_IN_TX == pUSARTHandle->TxBusyState)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d14d      	bne.n	8001118 <USART_IRQHandling+0x13c>
		{
			// Keep sending data until Txlen reaches to zero
			if (0U < pUSARTHandle->TxLen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03d      	beq.n	8001100 <USART_IRQHandling+0x124>
			{
				// Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if (USART_WORDLEN_9BITS == pUSARTHandle->USART_Config.USART_WordLength)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7b5b      	ldrb	r3, [r3, #13]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d129      	bne.n	80010e0 <USART_IRQHandling+0x104>
				{
					// if 9BIT load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010a0:	605a      	str	r2, [r3, #4]

					// check for USART_ParityControl
					if (USART_PARITY_DISABLE == pUSARTHandle->USART_Config.USART_ParityControl)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7b9b      	ldrb	r3, [r3, #14]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10f      	bne.n	80010ca <USART_IRQHandling+0xee>
					{
						// No parity is used in this transfer , so 9bits of user data will be sent
						// Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 2;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	1e9a      	subs	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
 80010c8:	e01a      	b.n	8001100 <USART_IRQHandling+0x124>
					}
					else
					{
						// Parity bit is used in this transfer. so 8bits of user data will be sent
						// The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	1e5a      	subs	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
 80010de:	e00f      	b.n	8001100 <USART_IRQHandling+0x124>
					}
				}
				else
				{
					// This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]

					// Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]
				}
			}

			if (0U == pUSARTHandle->TxLen)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <USART_IRQHandling+0x13c>
			{
				// TxLen is zero
				// Implement the code to clear the TXEIE bit (disable interrupt for TXE flag)
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001116:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_RXNE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d073      	beq.n	800121e <USART_IRQHandling+0x242>
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d070      	beq.n	800121e <USART_IRQHandling+0x242>
	{
		// this interrupt is because of rxne
		if (USART_BUSY_IN_RX == pUSARTHandle->RxBusyState)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001142:	2b01      	cmp	r3, #1
 8001144:	d16b      	bne.n	800121e <USART_IRQHandling+0x242>
		{
			if (0U < pUSARTHandle->RxLen)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d053      	beq.n	80011f6 <USART_IRQHandling+0x21a>
			{
				// Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if (USART_WORDLEN_9BITS == pUSARTHandle->USART_Config.USART_WordLength)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7b5b      	ldrb	r3, [r3, #13]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d12f      	bne.n	80011b6 <USART_IRQHandling+0x1da>
				{
					// We are going to receive 9bit data in a frame

					// Now, check are we using USART_ParityControl control or not
					if (USART_PARITY_DISABLE == pUSARTHandle->USART_Config.USART_ParityControl)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b9b      	ldrb	r3, [r3, #14]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d119      	bne.n	8001192 <USART_IRQHandling+0x1b6>
					{
						// No parity is used , so all 9bits will be of user data

						// read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	b29a      	uxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800116e:	b292      	uxth	r2, r2
 8001170:	801a      	strh	r2, [r3, #0]

						// Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	1e9a      	subs	r2, r3, #2
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	61da      	str	r2, [r3, #28]
 8001190:	e031      	b.n	80011f6 <USART_IRQHandling+0x21a>
					}
					else
					{
						// Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen -= 1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	e01f      	b.n	80011f6 <USART_IRQHandling+0x21a>
				else
				{
					// We are going to receive 8bit data in a frame

					// Now, check are we using USART_ParityControl control or not
					if (USART_PARITY_DISABLE == pUSARTHandle->USART_Config.USART_ParityControl)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7b9b      	ldrb	r3, [r3, #14]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <USART_IRQHandling+0x1f2>
					{
						// No parity is used , so all 8bits will be of user data

						// read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e009      	b.n	80011e2 <USART_IRQHandling+0x206>
					else
					{
						// Parity is used, so 7 bits will be of user data and 1 bit is parity

						// read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]
					}

					// Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen -= 1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	61da      	str	r2, [r3, #28]
				}
			}

			if (!pUSARTHandle->RxLen)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <USART_IRQHandling+0x242>
			{
				// disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0220 	bic.w	r2, r2, #32
 800120c:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001216:	2101      	movs	r1, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff f8b3 	bl	8000384 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	// Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_CTS);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001228:	617b      	str	r3, [r7, #20]

	// Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001234:	613b      	str	r3, [r7, #16]

	// Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	//temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);

	if (temp1 && temp2)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00e      	beq.n	800125a <USART_IRQHandling+0x27e>
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <USART_IRQHandling+0x27e>
	{
		// Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_CTS);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001250:	601a      	str	r2, [r3, #0]

		// this interrupt is because of CTS
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001252:	2103      	movs	r1, #3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f895 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	// Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	617b      	str	r3, [r7, #20]

	// Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00f      	beq.n	8001298 <USART_IRQHandling+0x2bc>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <USART_IRQHandling+0x2bc>
	{
		// Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_IDLE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	f023 0310 	bic.w	r3, r3, #16
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	617b      	str	r3, [r7, #20]

		// this interrupt is because of IDLE
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001290:	2102      	movs	r1, #2
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f876 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	// Implement the code to check the status of ORE flag in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	617b      	str	r3, [r7, #20]

	// Implement the code to check the status of RXNEIE bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0305 	and.w	r3, r3, #5
 80012ae:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <USART_IRQHandling+0x2e8>
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <USART_IRQHandling+0x2e8>
	{
		// Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		// this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80012bc:	2107      	movs	r1, #7
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff f860 	bl	8000384 <USART_ApplicationEventCallback>

// Noise Flag, Overrun error and Framing Error in multibuffer communication
// We dont discuss multibuffer communication in this course. please refer to the RM
// The below code will get executed in only if multibuffer mode is used.

	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE) ;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	613b      	str	r3, [r7, #16]

	if (temp2)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01e      	beq.n	8001314 <USART_IRQHandling+0x338>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	617b      	str	r3, [r7, #20]

		if (temp1 & (1 << USART_SR_FE))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <USART_IRQHandling+0x314>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 80012e8:	2105      	movs	r1, #5
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f84a 	bl	8000384 <USART_ApplicationEventCallback>
		}

		if (temp1 & (1 << USART_SR_NE))
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <USART_IRQHandling+0x326>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80012fa:	2106      	movs	r1, #6
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff f841 	bl	8000384 <USART_ApplicationEventCallback>
		}

		if(temp1 & (1 << USART_SR_ORE))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <USART_IRQHandling+0x338>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800130c:	2107      	movs	r1, #7
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff f838 	bl	8000384 <USART_ApplicationEventCallback>
		}
	}
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <__libc_init_array>:
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	4d0d      	ldr	r5, [pc, #52]	@ (8001354 <__libc_init_array+0x38>)
 8001320:	4c0d      	ldr	r4, [pc, #52]	@ (8001358 <__libc_init_array+0x3c>)
 8001322:	1b64      	subs	r4, r4, r5
 8001324:	10a4      	asrs	r4, r4, #2
 8001326:	2600      	movs	r6, #0
 8001328:	42a6      	cmp	r6, r4
 800132a:	d109      	bne.n	8001340 <__libc_init_array+0x24>
 800132c:	4d0b      	ldr	r5, [pc, #44]	@ (800135c <__libc_init_array+0x40>)
 800132e:	4c0c      	ldr	r4, [pc, #48]	@ (8001360 <__libc_init_array+0x44>)
 8001330:	f000 f818 	bl	8001364 <_init>
 8001334:	1b64      	subs	r4, r4, r5
 8001336:	10a4      	asrs	r4, r4, #2
 8001338:	2600      	movs	r6, #0
 800133a:	42a6      	cmp	r6, r4
 800133c:	d105      	bne.n	800134a <__libc_init_array+0x2e>
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	f855 3b04 	ldr.w	r3, [r5], #4
 8001344:	4798      	blx	r3
 8001346:	3601      	adds	r6, #1
 8001348:	e7ee      	b.n	8001328 <__libc_init_array+0xc>
 800134a:	f855 3b04 	ldr.w	r3, [r5], #4
 800134e:	4798      	blx	r3
 8001350:	3601      	adds	r6, #1
 8001352:	e7f2      	b.n	800133a <__libc_init_array+0x1e>
 8001354:	080013bc 	.word	0x080013bc
 8001358:	080013bc 	.word	0x080013bc
 800135c:	080013bc 	.word	0x080013bc
 8001360:	080013c0 	.word	0x080013c0

08001364 <_init>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr

08001370 <_fini>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	bf00      	nop
 8001374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001376:	bc08      	pop	{r3}
 8001378:	469e      	mov	lr, r3
 800137a:	4770      	bx	lr
