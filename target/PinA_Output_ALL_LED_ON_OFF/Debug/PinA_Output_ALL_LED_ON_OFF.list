
PinA_Output_ALL_LED_ON_OFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b4  080003bc  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b4  080003b4  000013bc  2**0
                  CONTENTS
  4 .ARM          00000000  080003b4  080003b4  000013bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b4  080003bc  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b4  080003b4  000013b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b8  080003b8  000013b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013bc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000146  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000097  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000015c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000050f  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c46  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000066f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0000673c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800039c 	.word	0x0800039c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800039c 	.word	0x0800039c

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
	uint32_t *pClkctrlreg = (uint32_t *)0x40023830;
 80001ce:	4b47      	ldr	r3, [pc, #284]	@ (80002ec <main+0x124>)
 80001d0:	617b      	str	r3, [r7, #20]
	uint32_t *pPortDModeReg = (uint32_t *)0x40020C00;
 80001d2:	4b47      	ldr	r3, [pc, #284]	@ (80002f0 <main+0x128>)
 80001d4:	613b      	str	r3, [r7, #16]
	uint32_t *pPortDOutReg = (uint32_t *)0x40020C14;
 80001d6:	4b47      	ldr	r3, [pc, #284]	@ (80002f4 <main+0x12c>)
 80001d8:	60fb      	str	r3, [r7, #12]

	uint32_t *pPortAModeReg = (uint32_t *)0x40020000;
 80001da:	4b47      	ldr	r3, [pc, #284]	@ (80002f8 <main+0x130>)
 80001dc:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortAOutReg = (uint32_t *)0x40020014;
 80001de:	4b47      	ldr	r3, [pc, #284]	@ (80002fc <main+0x134>)
 80001e0:	607b      	str	r3, [r7, #4]

	//Enable the clock for GPIOD peripheral in the AHB1ENR (SET the 3rd bit position)
	*pClkctrlreg |= (1 << 3);
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	601a      	str	r2, [r3, #0]
	//Enable the clock for GPIOA peripheral in the AHB1ENR (SET the 0th bit position)
	*pClkctrlreg |= (1 << 0);
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0201 	orr.w	r2, r3, #1
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO Pin PD12 as output (GPIOD Mode Register)
	//a. clear the 24th and 25th bit positions (CLEAR)
	*pPortDModeReg &= ~(3 << 24);
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	601a      	str	r2, [r3, #0]
	//b. make 24th bit position as 1 (SET)
	*pPortDModeReg |= (1 << 24);
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO Pin PD13 as output (GPIOD Mode Register)
	//a. clear the 26th and 27th bit positions (CLEAR)
	*pPortDModeReg &= ~(12 << 26);
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	601a      	str	r2, [r3, #0]
	//b. make 26th bit position as 1 (SET)
	*pPortDModeReg |= (1 << 26);
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO Pin PD14 as output (GPIOD Mode Register)
	//a. clear the 28th and 29th bit positions (CLEAR)
	*pPortDModeReg &= ~(1 << 28);
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	601a      	str	r2, [r3, #0]
	//b. make 27th bit position as 1 (SET)
	*pPortDModeReg |= (1 << 28);
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO Pin PD15 as output (GPIOD Mode Register)
	//a. clear the 30th and 31st bit positions (CLEAR)
	*pPortDModeReg &= ~(12 << 30);
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]
	//b. make 27th bit position as 1 (SET)
	*pPortDModeReg |= (1 << 30);
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO Pin PA0 as output (GPIOA Mode Register)
	//a. clear the 0th and 1st bit positions (CLEAR)
	*pPortAModeReg &= ~(3 << 0);
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f023 0203 	bic.w	r2, r3, #3
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]
	//b. make 0th bit position as 1 (SET)
	*pPortAModeReg |= (1 << 0);
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0201 	orr.w	r2, r3, #1
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	601a      	str	r2, [r3, #0]

	//SET 0th bit of the output data register to make I/O pin-0 as HIGH
	*pPortAOutReg |= (1 << 0);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 0201 	orr.w	r2, r3, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]

	//SET 0th bit of the output data register to make I/O pin-0 as LOW
    //*pPortAOutReg &= ~(1 << 0);

	uint8_t pinStatus = (uint8_t)(*pPortAOutReg);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	70fb      	strb	r3, [r7, #3]

	while(1)
	{
		if(pinStatus)
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d018      	beq.n	80002b8 <main+0xf0>
		{
			//SET 12th,13th,14th and 15th bit of the output data register to make I/O pin-12,13,14,15 as HIGH
			//turn on the LED
			*pPortDOutReg |= (1 << 12);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	601a      	str	r2, [r3, #0]
			*pPortDOutReg |= (1 << 13);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
			*pPortDOutReg |= (1 << 14);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
			*pPortDOutReg |= (1 << 15);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	e7e3      	b.n	8000280 <main+0xb8>
		}
		else
		{
			//SET 12th,13th,14th and 15th bit of the output data register to make I/O pin-12,13,14,15 as LOW
			//turn off the LED
			*pPortDOutReg &= ~(1 << 12);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]
			*pPortDOutReg &= ~(1 << 13);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	601a      	str	r2, [r3, #0]
			*pPortDOutReg &= ~(1 << 14);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	601a      	str	r2, [r3, #0]
			*pPortDOutReg &= ~(1 << 15);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]
		if(pinStatus)
 80002e8:	e7ca      	b.n	8000280 <main+0xb8>
 80002ea:	bf00      	nop
 80002ec:	40023830 	.word	0x40023830
 80002f0:	40020c00 	.word	0x40020c00
 80002f4:	40020c14 	.word	0x40020c14
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40020014 	.word	0x40020014

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	@ (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	@ (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 f811 	bl	8000354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff49 	bl	80001c8 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	080003bc 	.word	0x080003bc
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	2000001c 	.word	0x2000001c

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <__libc_init_array>:
 8000354:	b570      	push	{r4, r5, r6, lr}
 8000356:	4d0d      	ldr	r5, [pc, #52]	@ (800038c <__libc_init_array+0x38>)
 8000358:	4c0d      	ldr	r4, [pc, #52]	@ (8000390 <__libc_init_array+0x3c>)
 800035a:	1b64      	subs	r4, r4, r5
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	2600      	movs	r6, #0
 8000360:	42a6      	cmp	r6, r4
 8000362:	d109      	bne.n	8000378 <__libc_init_array+0x24>
 8000364:	4d0b      	ldr	r5, [pc, #44]	@ (8000394 <__libc_init_array+0x40>)
 8000366:	4c0c      	ldr	r4, [pc, #48]	@ (8000398 <__libc_init_array+0x44>)
 8000368:	f000 f818 	bl	800039c <_init>
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	10a4      	asrs	r4, r4, #2
 8000370:	2600      	movs	r6, #0
 8000372:	42a6      	cmp	r6, r4
 8000374:	d105      	bne.n	8000382 <__libc_init_array+0x2e>
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	f855 3b04 	ldr.w	r3, [r5], #4
 800037c:	4798      	blx	r3
 800037e:	3601      	adds	r6, #1
 8000380:	e7ee      	b.n	8000360 <__libc_init_array+0xc>
 8000382:	f855 3b04 	ldr.w	r3, [r5], #4
 8000386:	4798      	blx	r3
 8000388:	3601      	adds	r6, #1
 800038a:	e7f2      	b.n	8000372 <__libc_init_array+0x1e>
 800038c:	080003b4 	.word	0x080003b4
 8000390:	080003b4 	.word	0x080003b4
 8000394:	080003b4 	.word	0x080003b4
 8000398:	080003b8 	.word	0x080003b8

0800039c <_init>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr

080003a8 <_fini>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr
